{"ast":null,"code":"var _jsxFileName = \"/Users/briansimmons/Desktop/qualified-challenges/React/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Incrementbar from \"./increment-bar\";\nimport StartStop from \"./start-stop\";\nimport DisplayTimer from \"./display-timer\";\nimport ProgressBar from \"./progress-bar\";\nimport { minutesToDuration } from \"../utils/duration\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focus, setFocus] = useState(25);\n  const [rest, setRest] = useState(5);\n\n  const toggleTimer = () => {\n    setIsTimerRunning(!isTimerRunning);\n  };\n\n  useInterval(() => {// ToDo: Implement what should happen when the timer is running\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => !prevState);\n  }\n\n  console.log(isTimerRunning);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Incrementbar, {\n    event: \"Focus\",\n    interval: focus,\n    setInterval: setFocus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Incrementbar, {\n    event: \"Break\",\n    interval: rest,\n    setInterval: setRest,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StartStop, {\n    playPause: playPause,\n    isTimerRunning: isTimerRunning,\n    setIsTimerRunning: setIsTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DisplayTimer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 10\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ProgressBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/briansimmons/Desktop/qualified-challenges/React/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","Incrementbar","StartStop","DisplayTimer","ProgressBar","minutesToDuration","Pomodoro","isTimerRunning","setIsTimerRunning","focus","setFocus","rest","setRest","toggleTimer","playPause","prevState","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAAQC,iBAAR,QAAgC,mBAAhC;;AAEA,SAASC,QAAT,GAAoB;AAClB;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,CAAD,CAAhC;;AACA,QAAMe,WAAW,GAAG,MAAM;AACxBL,IAAAA,iBAAiB,CAAC,CAACD,cAAF,CAAjB;AACD,GAFD;;AAKAP,EAAAA,WAAW,CACT,MAAM,CACJ;AACD,GAHQ,EAITO,cAAc,GAAG,IAAH,GAAU,IAJf,CAAX;;AAOA,WAASO,SAAT,GAAqB;AACnBN,IAAAA,iBAAiB,CAAEO,SAAD,IAAe,CAACA,SAAjB,CAAjB;AACD;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAYV,cAAZ;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAE,OAArB;AAA+B,IAAA,QAAQ,EAAEE,KAAzC;AAAgD,IAAA,WAAW,EAAEC,QAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAIE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAE,OAArB;AAA8B,IAAA,QAAQ,EAAEC,IAAxC;AAA8C,IAAA,WAAW,EAAGC,OAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJF,CADF,eASE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAEE,SAAtB;AAAiC,IAAA,cAAc,EAAEP,cAAjD;AAAiE,IAAA,iBAAiB,EAAEC,iBAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADF,CATF,eAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAFF,eAKE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CALF,CAdF,CADF;AA0BD;;AAED,eAAeF,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Incrementbar from \"./increment-bar\"\nimport StartStop from \"./start-stop\"\nimport DisplayTimer from \"./display-timer\"\nimport ProgressBar from \"./progress-bar\"\nimport {minutesToDuration} from \"../utils/duration\"\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focus, setFocus] = useState(25)\n  const [rest, setRest] = useState(5)\n  const toggleTimer = () => {\n    setIsTimerRunning(!isTimerRunning)\n  }\n  \n\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n  }\n  console.log(isTimerRunning)\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <Incrementbar event={\"Focus\"}  interval={focus} setInterval={setFocus}/>\n        </div>\n        <div className=\"col\">\n          <Incrementbar event={\"Break\"} interval={rest} setInterval ={setRest}/>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n        <StartStop playPause={playPause} isTimerRunning={isTimerRunning} setIsTimerRunning={setIsTimerRunning}  />\n        </div>\n      </div>\n      <div>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <div className=\"row mb-2\">\n         <DisplayTimer/>\n        </div>\n        <div className=\"row mb-2\">\n          <ProgressBar/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}