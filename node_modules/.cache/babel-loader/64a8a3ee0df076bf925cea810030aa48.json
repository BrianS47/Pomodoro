{"ast":null,"code":"var _jsxFileName = \"/Users/briansimmons/Desktop/qualified-challenges/React/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState, useEffect } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Incrementbar from \"./increment-bar\";\nimport StartStop from \"./start-stop\";\nimport DisplayTimer from \"./display-timer\";\nimport ProgressBar from \"./progress-bar\";\nimport { minutesToDuration } from \"../utils/duration\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focus, setFocus] = useState(25);\n  const [rest, setRest] = useState(5);\n  const [timeDisplay, setTimeDisplay] = useState(false);\n  const [timer, setTimer] = useState(0);\n\n  const stopAndReset = () => {\n    setIsTimerRunning(false);\n    setTimeDisplay(false);\n    setFocus(25);\n    setRest(5);\n  };\n\n  useInterval(() => {\n    // ToDo: Implement what should happen when the timer is running\n    setTimer(timer - 1);\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => !prevState);\n    setTimeDisplay(true);\n  }\n\n  useEffect(() => {\n    setTimer(focus);\n  }, [focus]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Incrementbar, {\n    event: \"Focus\",\n    interval: focus,\n    setInterval: setFocus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Incrementbar, {\n    event: \"Break\",\n    interval: rest,\n    setInterval: setRest,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StartStop, {\n    playPause: playPause,\n    isTimerRunning: isTimerRunning,\n    stopAndReset: stopAndReset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }))), timeDisplay ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DisplayTimer, {\n    timer: timer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 10\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ProgressBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }))) : null);\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/briansimmons/Desktop/qualified-challenges/React/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useEffect","classNames","useInterval","Incrementbar","StartStop","DisplayTimer","ProgressBar","minutesToDuration","Pomodoro","isTimerRunning","setIsTimerRunning","focus","setFocus","rest","setRest","timeDisplay","setTimeDisplay","timer","setTimer","stopAndReset","playPause","prevState"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Incrementbar from \"./increment-bar\"\nimport StartStop from \"./start-stop\"\nimport DisplayTimer from \"./display-timer\"\nimport ProgressBar from \"./progress-bar\"\nimport {minutesToDuration} from \"../utils/duration\"\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focus, setFocus] = useState(25)\n  const [rest, setRest] = useState(5)\n  const [timeDisplay,setTimeDisplay] = useState(false)\n  const [timer,setTimer] = useState(0)\n  const stopAndReset = () => {\n    setIsTimerRunning(false)\n    setTimeDisplay(false)\n    setFocus(25)\n    setRest(5)\n  }\n  \n\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n      setTimer(timer - 1)\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n    setTimeDisplay(true)\n  }\n\n  useEffect(\n    () => {\n      setTimer(focus)\n    },\n    [focus]\n  )\n\n\n \n\n  return (\n    <div className=\"pomodoro\">\n      \n      <div className=\"row\">\n        <div className=\"col \">\n          <Incrementbar event={\"Focus\"}  interval={focus} setInterval={setFocus}/>\n        </div>\n        <div className=\"col\">\n          <Incrementbar event={\"Break\"} interval={rest} setInterval ={setRest}/>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n        <StartStop playPause={playPause} isTimerRunning={isTimerRunning}  stopAndReset={stopAndReset}  />\n        </div>\n      </div>\n      \n      \n      { timeDisplay ? <div>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        \n        <div className=\"row mb-2\">\n         <DisplayTimer timer={timer}/>\n        </div>\n        <div className=\"row mb-2\">\n          <ProgressBar/>\n        </div>\n      </div>  : null}\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}